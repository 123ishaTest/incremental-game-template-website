(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{101:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return u}));var i=n(0),r=n.n(i);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),y=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=y(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=y(n),d=i,u=p["".concat(o,".").concat(d)]||p[d]||b[d]||a;return n?r.a.createElement(u,s(s({ref:t},c),{},{components:n})):r.a.createElement(u,s({ref:t},c))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},77:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return y}));var i=n(2),r=n(6),a=(n(0),n(101)),o={id:"hotkeys",title:"Hotkeys"},s={unversionedId:"tools/hotkeys",id:"tools/hotkeys",isDocsHomePage:!1,title:"Hotkeys",description:"Navigating Incremental Games can sometimes be a bit of a pain.",source:"@site/docs/tools/hotkeys.md",slug:"/tools/hotkeys",permalink:"/incremental-game-template-website/docs/tools/hotkeys",version:"current",sidebar:"docs",previous:{title:"Loot Tables",permalink:"/incremental-game-template-website/docs/tools/loot-tables"},next:{title:"Probability",permalink:"/incremental-game-template-website/docs/tools/probability"}},l=[{value:"Requirements",id:"requirements",children:[]},{value:"Usage",id:"usage",children:[]},{value:"Implementation",id:"implementation",children:[]},{value:"TODO",id:"todo",children:[]},{value:"See also",id:"see-also",children:[]}],c={rightToc:l};function y(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(i.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Navigating Incremental Games can sometimes be a bit of a pain.\nIn my opinion, a games' difficulty should not come from its UI.\nHotkeys can improve User Experience by allowing the user to navigate tabs or claim resources with a single button press."),Object(a.b)("h2",{id:"requirements"},"Requirements"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Work on all keyboard layouts"),Object(a.b)("li",{parentName:"ul"},"Disable keybinds on request"),Object(a.b)("li",{parentName:"ul"},"Possibility to add a ",Object(a.b)("a",Object(i.a)({parentName:"li"},{href:"/incremental-game-template-website/docs/tools/requirements"}),"Requirement")," to a keybind"),Object(a.b)("li",{parentName:"ul"},"Get an overview of all registered keybinds")),Object(a.b)("h2",{id:"usage"},"Usage"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-ts"}),'// Create your first keybind.\nconst keyBind = new KeyBind("shift+x",\n    "Do a thing", () => {\n        console.log("shift + x pressed!");\n        // Additional logic\n    }, KeyEventType.KeyUp\n);\n\n// And register it.\nHotKeys.addKeyBind(keyBind);\n\n// Get a list of descriptions for the registered keybinds.\nHotKeys.getKeyBindDescriptions().forEach(keyBind => {\n    console.log(keyBind.keys) // "shift+x"\n    console.log(keyBind.description) // "Do a thing"\n})\n\n// This callback only triggers if the condition is met.\nconst keyBindWithRequirement = new KeyBind("ctrl+a",\n    "Do another thing", () => {\n        console.log("ctrl + a pressed!");\n        // Additional logic\n    }, new CurrencyRequirement(10, CurrencyType.Money)\n);\nHotKeys.addKeyBind(keyBindWithRequirement);\n\n// Or use a custom condition.\nconst keyBindWithCustomCondition = new CustomConditionKeyBind("x",\n    "Only works on wednesdays", () => {\n        // Perform some logic\n    }, () => {\n        return new Date().getDay() === 3;\n    })\n\n// Manually trigger a callback.\nHotKeys.trigger("ctrl+a");\n')),Object(a.b)("h2",{id:"implementation"},"Implementation"),Object(a.b)("p",null,"I decided to use the ",Object(a.b)("a",Object(i.a)({parentName:"p"},{href:"https://craig.is/killing/mice"}),"Mousetrap library"),".\nIt works very well and handles different keyboard layouts for us automatically!"),Object(a.b)("p",null,"We need to pass the event type to Mousetrap. The following types are supported."),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-ts",metastring:'title="src/ig-template/tools/hotkeys/KeyEventType.ts"',title:'"src/ig-template/tools/hotkeys/KeyEventType.ts"'}),'export enum KeyEventType {\n    KeyPress = "keypress",\n    KeyDown = "keydown",\n    KeyUp = "keyup"\n}\n')),Object(a.b)("p",null,"A ",Object(a.b)("inlineCode",{parentName:"p"},"KeyBind")," is a fairly simple data class."),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-ts",metastring:'title="src/ig-template/tools/hotkeys/KeyBind.ts"',title:'"src/ig-template/tools/hotkeys/KeyBind.ts"'}),"export class KeyBind {\n    keys: string | string[];\n    description: string;\n    callback: Function;\n    requirement: Requirement;\n    eventType: KeyEventType;\n}\n")),Object(a.b)("p",null,"On top of that a list of keybinds need to be kept such that you can always request a list of them."),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-ts",metastring:'title="src/ig-template/tools/hotkeys/HotKeys.ts"',title:'"src/ig-template/tools/hotkeys/HotKeys.ts"'}),"/**\n * Easily add KeyBinds from anywhere in your codebase.\n * Very useful to switch tabs or claim resources!\n */\nexport class HotKeys {\n\n    /**\n     * List of all registered keybinds\n     * @private\n     */\n    private static _keyBinds: KeyBind[] = [];\n\n    /**\n     * Register a keybind with mousetrap, but add the requirement in the callback.\n     */\n    public static addKeyBind(keyBind: KeyBind) {\n        Mousetrap.bind(keyBind.keys, () => {\n            if (keyBind.requirement.isCompleted) {\n                keyBind.callback();\n            }\n        }, keyBind.eventType)\n        this._keyBinds.push(keyBind);\n    }\n\n    /**\n     * Unregister a keybind from mousetrap.\n     */\n    public static removeKeyBind(keys: string | string[], action = KeyEventType.KeyDown) {\n        this._keyBinds = this._keyBinds.filter((keyBind) => keyBind.keys !== keys);\n        Mousetrap.unbind(keys, action);\n    }\n\n    /**\n     * Manyally trigger a callback. Note that the requirement still needs to be completed for it to run.\n     */\n    public static trigger(keys: string, action = KeyEventType.KeyDown) {\n        Mousetrap.trigger(keys, action);\n    }\n\n    /**\n     * Generate a list of all descriptions to show in the UI.\n     */\n    public static getKeyBindDescriptions(): KeyBindDescription[] {\n        return this._keyBinds.map(keyBind => {\n            const keysText: string = (typeof keyBind.keys === 'string') ? keyBind.keys : keyBind.keys.join(\", \");\n\n            return {\n                'keys': keysText,\n                'description': keyBind.description\n            };\n        });\n    }\n\n    /**\n     * Remove all registered keybinds.\n     */\n    public static reset(): void {\n        this._keyBinds = [];\n        Mousetrap.reset();\n    }\n}\n\n")),Object(a.b)("h2",{id:"todo"},"TODO"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Let the player set they own keybinds.")),Object(a.b)("h2",{id:"see-also"},"See also"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(i.a)({parentName:"li"},{href:"https://craig.is/killing/mice"}),"Mousetrap documentation")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(i.a)({parentName:"li"},{href:"https://github.com/123ishaTest/incremental-game-template/blob/master/src/ig-template/tools/hotkeys"}),"src/ig-template/tools/hotkeys/")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(i.a)({parentName:"li"},{href:"https://github.com/123ishaTest/incremental-game-template/blob/master/src/ig-template/tools/hotkeys/HotKeys.ts"}),"src/ig-template/tools/hotkeys/HotKeys.ts")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(i.a)({parentName:"li"},{href:"https://github.com/123ishaTest/incremental-game-template/blob/master/src/ig-template/tools/hotkeys/KeyBind.ts"}),"src/ig-template/tools/hotkeys/KeyBind.ts")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(i.a)({parentName:"li"},{href:"https://github.com/123ishaTest/incremental-game-template/blob/master/src/ig-template/tools/hotkeys/CustomConditionKeyBind.ts"}),"src/ig-template/tools/hotkeys/CustomConditionKeyBind.ts"))))}y.isMDXComponent=!0}}]);